import "../sys/linux"
import "../sys/win32"

effect stdio {
	fun stdin () handle reader
	fun stdout() handle writer
	fun stderr() handle writer
}

fun print(s str) / stdio {
	write(cast s) with stdout();
}

fun printerr(s str) / stdio {
	write(cast s) with stderr();
}

@capability(os = "linux")
fun linux() handle stdio / linux.sys {
	handle stdio {
		fun stdin() reader {
			fun { buf -> linux.read(0, buf) }
		}
		fun stdout() writer {
			fun { buf -> linux.write(1, buf) }
		}
		fun stderr() writer {
			fun { buf -> linux.write(2, buf) }
		}
	}
}

@capability(os = "windows")
fun windows() handle stdio / win32.sys {
	handle stdio {
		fun stdin() reader {
			let stdin = win32.stdin()
			fun {
				buf ->
				mut read = 0
				win32.ReadConsoleA(stdin, &buf[0], cast len(buf), &read, 0)
				cast read
			}
		}
		fun stdout() writer {
			let stdout = win32.stdout()
			fun {
				buf ->
				mut written = 0
				win32.WriteConsoleA(stdout, &buf[0], cast len(buf), &written, 0)
				cast written
			}
		}
		fun stderr() writer {
			let stderr = win32.stderr()
			fun {
				buf ->
				mut written = 0
				win32.WriteConsoleA(stderr, &buf[0], cast len(buf), &written, 0)
				cast written
			}
		}
	}
}
