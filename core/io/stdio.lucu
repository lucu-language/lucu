import "../sys/linux"
import "../sys/win32"
import "../sys/wasi"

effect stdio {
	fun stdin () impl reader
	fun stdout() impl writer
	fun stderr() impl writer
}

fun print(s str) / stdio {
	do write(cast s) with stdout()
}

fun printerr(s str) / stdio {
	do write(cast s) with stderr()
}

fun putint(n int) / stdio {
	with stdout() {
		do write_int(n)
		do write("\n")
	}
}

fun putstr(s str) / stdio {
	with stdout() {
		do write(cast s)
		do write("\n")
	}
}

fun wait() / stdio {
	do skip_line() with stdin()
}

@capability(os = "linux")
fun linux() impl stdio / linux.sys {
	impl stdio {
		fun stdin() impl reader {
			fun { buf -> linux.read(0, buf) }
		}
		fun stdout() impl writer {
			impl writer {
				fun write(buf []u8) usize {
					linux.write(1, buf)
				}
				fun flush() {
				}
			}
		}
		fun stderr() impl writer {
			impl writer {
				fun write(buf []u8) usize {
					linux.write(2, buf)
				}
				fun flush() {
				}
			}
		}
	}
}

@capability(os = "windows")
fun windows() impl stdio / win32.sys {
	impl stdio {
		fun stdin() impl reader {
			let stdin = win32.stdin()
			fun {
				buf ->
				mut read u32 = 0
				do win32.ReadConsoleA(stdin, &buf[0], cast len(buf), &read, 0)
				cast read
			}
		}
		fun stdout() impl writer {
			let stdout = win32.stdout()
			impl writer {
				fun write(buf []u8) usize {
					mut written u32 = 0
					do win32.WriteConsoleA(stdout, &buf[0], cast len(buf), &written, 0)
					cast written
				}
				fun flush() {
				}
			}
		}
		fun stderr() impl writer {
			let stderr = win32.stderr()
			impl writer {
				fun write(buf []u8) usize {
					mut written u32 = 0
					do win32.WriteConsoleA(stderr, &buf[0], cast len(buf), &written, 0)
					cast written
				}
				fun flush() {
				}
			}
		}
	}
}

@capability(os = "wasi")
fun wasi() impl stdio / wasi.sys {
	impl stdio {
		fun stdin() impl reader {
			fun {
				buf ->
				mut read u32 = 0
				do wasi.fd_read(0, [buf], &read)
				cast read
			}
		}
		fun stdout() impl writer {
			impl writer {
				fun write(buf []u8) usize {
					mut written u32 = 0
					do wasi.fd_write(1, [buf], &written)
					cast written
				}
				fun flush() {
				}
			}
		}
		fun stderr() impl writer {
			impl writer {
				fun write(buf []u8) usize {
					mut written u32 = 0
					do wasi.fd_write(2, [buf], &written)
					cast written
				}
				fun flush() {
				}
			}
		}
	}
}
