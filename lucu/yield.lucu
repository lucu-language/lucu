import "lucu:group"

effect Yield 't {
	func yield(t: 't)
}

type Generator 't = func (Yield 't)

type Mapping 'a 'b = func (a: 'a) -> 'b
type Predicate 't  = func (t: 't) -> bool

(Yield 'b) =>
func map(map: Mapping 'a 'b, gen: Generator 'a) {
	handle Yield 'a { a ->
		yield(map.(a))
	}
	gen.()
}


(Yield 'a) =>
func filter(pred: Predicate 'a, gen: Generator 'a) {
	handle Yield 'a { a ->
		if pred.(a) { yield(a) }
	}
	gen.()
}

(group.Monoid 'a) =>
func fold(gen: Generator 'a) -> 'a {
	mut acc = group.IDENTITY
	handle Yield 'a { a ->
		acc = group.binop(acc, a)
	}
	gen.()
	acc
}

(group.Sum 'a) =>
func sum(gen: Generator 'a) -> 'a {
	using group.sum
	fold(gen)
}

(group.Product 'a) =>
func product(gen: Generator 'a) -> 'a {
	using group.product
	fold(gen)
}

func count(gen: Generator 'a) -> usize {
	using sum
	map({ _ -> 1 as usize }, gen)
}

func unfold(seed: 'a, map: Mapping 'a 'a) {
	mut val = seed
	loop { val = map.(val) }
}

(Yield 'a) =>
func take(count: usize, gen: Generator 'a) {
	mut taken: usize = 0
	handle Yield 'a { a ->
		if taken++ == count {
			break
		} else {
			yield(a)
		}
	}
	gen.()
}

(Yield 'a) =>
func repeat(count: usize, seed: 'a) {
	using take(count)
	using loop
	yield(seed)
}

(Yield 'a) =>
func itermap(seed: 'a, map: Mapping 'a 'a) {
	unfold(seed) { a ->
		yield(a)
		map.(a)
	}
}

(SrcLoc) => {
	func find(pred: Predicate 't, gen: Generator 't) -> 't {
		handle Yield 't { t ->
			if pred.(t) { break t }
		}

		gen.()
		panic("not found")
	}
	func first(gen: Generator 't) -> 't {
		handle Yield 't { t ->
			break t
		}

		gen.()
		panic("nothing was yielded")
	}
	func nth(num: usize, gen: Generator 't) -> 't {
		mut current: usize = 0
		handle Yield 't { t ->
			if current == num {
				break t
			} else {
				current += 1
			}
		}

		gen.()
		panic("not enough was yielded")
	}
	func last(gen: Generator 't) -> 't {
		mut found     = false
		mut value: 't = ---
		handle Yield 't { t ->
			found = true
			value = t
		}

		gen.()
		if found {
			value
		} else {
			panic("nothing was yielded")
		}
	}
}
