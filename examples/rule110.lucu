import "core:io"

fun main() / io.stdio {
	# create buffers
	mut state [128]u8 = 0
	mut state = state[0..128]

	mut next [128]u8 = ---
	mut next = next[0..128]

	# init state
	state[127] = 1

	loop {
		# print state
		print_state(state)

		# wait for stdin
		io.wait()

		# get next state
		next_state(state, next)

		# swap buffers
		mut tmp = state
		state = next
		next = tmp
	}
}

fun rule(l u8, m u8, r u8) u8 {
	let rule [8]u8 = [0, 1, 1, 1, 0, 1, 1, 0]
	let num = (l * 4) + (m * 2) + (r * 1)
	rule[cast num]
}

fun next_state(original []const u8, next []u8) {
	assert(len(next) == len(original), "states do not have the same length")
	assert(len(next) > 1,              "states must have at least two cells")
	let len = len(next)

	# first index
	next[0] = rule(
		original[len - 1],
		original[0],
		original[1],
	)

	# middle indices
	for(1, len - 1) {
		cell ->
		next[cell] = rule(
			original[cell - 1],
			original[cell],
			original[cell + 1],
		)
	}

	# last index
	next[len - 1] = rule(
		original[len - 2],
		original[len - 1],
		original[0],
	)
}

fun print_state(state []const u8) / io.stdio {
	for(0, len(state)) {
		cell ->
		if state[cell] == 0 {
			io.print(" ")
		} else {
			io.print("X")
		}
	}
}
