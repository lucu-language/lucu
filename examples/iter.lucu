# we import 'io' from the core library to interact with the console
import "core:io"

# we define an effect for iterating over a collection
effect iter(`item) {
	fun next() `item
}

# we define an effect for interacting with a buffer
effect buf(`item) {
	fun push(elem `item) usize
	fun get(index usize) const `item

	# the iterator fails when next() is called if it is done
	fun iter() impl iter(const `item) -> unit
}

# default implementation for unit buffer
impl buf(unit) {
	fun push(elem unit) usize { 0 }
	fun get(index usize) unit { 0 }
	fun iter() impl iter(unit) {
		move {}
	}
}

# implementation of these effects using a constant sized array
fun array_buffer(`cap usize) impl buf(`item) {
	mut array [`cap]const `item = 0
	mut size  usize       = 0
	impl buf(`item) {
		fun push(elem `item) usize {
			array[size] = elem
			size++
		}
		fun get(index usize) const `item {
			array[index]
		}
		fun iter() impl iter(const `item) -> unit {
			mut array = array[0..size]
			mut current usize = 0
			move {
				if current < size {
					array[current++]
				} else {
					break
				}
			}
		}
	}
}

# example of using a string buffer
# the 'io.stdio' effect allows use of the 'io.println' function
fun main() / io.stdio {

	let buffer impl buf(str) = array_buffer(16)

	# a 'with' block puts the effect handler in scope
	# which allows us to use the defined effect functions
	with buffer {

		# we push some elements
		do push("Hello")
		do push("world")

		# a 'with loop' block is the same as a regular 'with',
		# but it loops until it gets a failure
		# this way we can iterate over all pushed elements and print them
		try with iter() as impl iter(str) -> unit loop {
			io.putstr(next())
		}

	}

}
