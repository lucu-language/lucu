# this is currently still hypothetical syntax for templates/generics
# some syntax changes from current syntax include:
#  (current => new)
#  - fun sign / effects       => fun sign with effects

# this is a typeclass-style effect
effect Index $num {
	fun to_index(n $num) usize
	fun from_index(i usize) $num
}

# typeclass instance
handle Index u16 {
	fun to_index(n u16) usize {
		n as usize
	}
	fun from_index(i usize) u16 {
		i as u16
	}
}

# a buffer effect that allows you to push and get data
# allowing the user to use keys smaller than the data type
# or to create recursive data types using a buffer
# TODO: $key should really be an internal opaque type here
effect Buffer $val $key {
	fun push(elem $val) $key
	fun get(index $key) $val
}

# fun that creates a fixed sized array buffer
# const generics woo
fun array_buffer($N usize) Buffer $val $key
	with Index $key
{
	# reserve a fixed-sized array on the stack
	mut array [$N]$val = ---
	mut size  usize    = 0
	handle Buffer $val $key {
		fun push(elem $val) $key {
			array[size] = elem
			from_index(size++)
		}
		fun get(index $key) $val {
			array[to_index(index)]
		}
	}
}

fun println_buffered(index $key)
	with debug, Buffer str $key
{
	putstr(get(index))
	putstr("\n")
}

fun main() with debug {
	# some bi-directional type inference
	let strbuf = array_buffer(1000) as Buffer u16 str 

	with strbuf {
		let a = push("Hello")
		let b = push("world")
		println_buffered(a)
		println_buffered(b)
	}
}

# Expected output:
# Hello
# world
