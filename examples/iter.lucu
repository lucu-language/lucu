# we define an effect for iterating over a collection
effect iter(`item) {
	fun next() `item
}

# we define an effect for interacting with a buffer
effect buf(`item) {
	fun push(elem `item) usize
	fun get(index usize) `item

	# the iterator fails when next() is called if it is done
	fun iter() handle iter(`item) fails
}

# default implementation for void buffer
handle buf(void) {
	fun push(elem void) usize { 0 }
	fun get(index usize) void { 0 }
	fun iter() handle iter(void) {
		fun {}
	}
}

# implementation of these effects using a constant sized array
fun array_buffer(`cap usize) handle buf(`item) {
	mut array [`cap]const `item = 0
	mut size  usize       = 0
	handle strbuf {
		fun push(elem `item) usize {
			array[size] = elem
			size++
		}
		fun get(index usize) `item {
			array[index]
		}
		fun iter() handle iter(`item) fails {
			mut current usize = 0
			fun {
				if current < size {
					array[current++]
				} else {
					fail
				}
			}
		}
	}
}

# example of using a string buffer
# the internal 'debug' effect contains the 'putstr' function
fun main() / debug {

	let buffer handle buf(const str) = array_buffer(16)

	# a 'with' block puts the effect handler in scope
	# which allows us to use the defined effect functions
	with buffer {

		# we push some elements
		push("Hello")
		push("world")

		# a 'with loop' block is the same as a regular 'with',
		# but it loops until it gets a failure
		# this way we can iterate over all pushed elements and print them
		with iter() loop {
			putstr(next())
			putstr("\n")
		}

	}

}
