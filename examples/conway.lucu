import "core:io"

fun init_board() [256]u8 {
	0
}

fun index(x usize, y usize) usize {
	x + y * 16
}

fun dec(n usize) usize {
	if n == 0 {
		15
	} else {
		n - 1
	}
}

fun inc(n usize) usize {
	if n == 15 {
		0
	} else {
		n + 1
	}
}

fun print_state(state []const u8) / io.stdio {
	for(0, 16) {
		y ->
		for(0, 16) {
			x ->
			let cell = index(x, y)
			if state[cell] == 0 {
				io.print("ðŸ˜”")
			} else {
				io.print("ðŸ¥º")
			}
		}
		io.print("\n")
	}
}

fun next_state(old []const u8, new []u8) {
	for(0, 16) {
		y ->
		for(0, 16) {
			x ->
			mut neighbors = 0

			if old[index(dec(x), dec(y))] > 0 do neighbors++
			if old[index(    x , dec(y))] > 0 do neighbors++
			if old[index(inc(x), dec(y))] > 0 do neighbors++
			if old[index(dec(x),     y )] > 0 do neighbors++
			if old[index(inc(x),     y )] > 0 do neighbors++
			if old[index(dec(x), inc(y))] > 0 do neighbors++
			if old[index(    x , inc(y))] > 0 do neighbors++
			if old[index(inc(x), inc(y))] > 0 do neighbors++

			let cell = index(x, y)
			if old[cell] > 0 {
				if neighbors == 2 {
					new[cell] = 1
				} else if neighbors == 3 {
					new[cell] = 1
				} else {
					new[cell] = 0
				}
			} else if neighbors == 3 {
				new[cell] = 1
			} else {
				new[cell] = 0
			}
		}
	}
}

fun main() / io.stdio {
	# create buffers
	mut state = init_board()[0..256]
	mut next = init_board()[0..256]

	# init state
	state[index(0, 0)] = 1
	state[index(1, 1)] = 1
	state[index(2, 1)] = 1
	state[index(0, 2)] = 1
	state[index(1, 2)] = 1

	loop {
		# print state
		print_state(state)

		# wait for stdin
		io.wait()

		# get next state
		next_state(state, next)

		# swap buffers
		mut tmp = state
		state = next
		next = tmp
	}
}
